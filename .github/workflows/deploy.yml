name: Build, Test, and Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ github.sha }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      # ─── Rust toolchain & cache ────────────────────────────────────────────────
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"
          cache-directories: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: "latest"

      - name: Build WebAssembly
        run: wasm-pack build --release
        env:
          RUSTFLAGS: "-C opt-level=3"

      # ─── Run Rust WASM tests ────────────────────────────────────────────────────
      - name: Run Rust WebAssembly tests
        run: wasm-pack test --chrome --headless

      # ─── Node / pnpm setup & cache ─────────────────────────────────────────────
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "./www/pnpm-lock.yaml"

      - name: Install JS dependencies
        working-directory: ./www
        run: pnpm install --frozen-lockfile

      # ─── Build & Test frontend ──────────────────────────────────────────────────
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v3
        with:
          key: playwright-${{ runner.os }}-${{ hashFiles('www/pnpm-lock.yaml') }}
          path: ~/.cache/ms-playwright
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Setup Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ./www
        run: pnpm exec playwright install chromium --with-deps

      - name: Run tests
        working-directory: ./www
        run: pnpm test
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: www/playwright-report/
          retention-days: 7

      - name: Build production bundle
        working-directory: ./www
        run: pnpm build:prod
        env:
          NODE_ENV: production
          GITHUB_SHA: ${{ github.sha }}

      # ─── Ensure CNAME file is included ────────────────────────────────────────────
      - name: Copy CNAME file to dist
        run: cp -f www/CNAME www/dist/ || true

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: www/dist
          retention-days: 1

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
          retention-days: 1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000
