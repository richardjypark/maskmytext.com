name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # ─── Rust toolchain & cache ────────────────────────────────────────────────
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-${{ hashFiles('**/Cargo.lock') }}"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WebAssembly
        run: wasm-pack build --release

      # ─── Run Rust WASM tests ────────────────────────────────────────────────────
      - name: Run Rust WebAssembly tests
        run: wasm-pack test --chrome --headless

      # ─── Node / pnpm setup & cache ─────────────────────────────────────────────
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "./www/pnpm-lock.yaml"

      - name: Install JS dependencies
        working-directory: ./www
        run: pnpm install

      # ─── Patch service worker version ────────────────────────────────────────────
      - name: Update service worker cache version
        run: |
          sed -i "s/const CACHE_NAME = .*/const CACHE_NAME = \"mask-my-text-${GITHUB_SHA::8}\";/" www/service-worker.js

      # ─── Build & Test frontend ──────────────────────────────────────────────────
      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v3
        with:
          key: playwright-${{ runner.os }}-${{ hashFiles('www/pnpm-lock.yaml') }}
          path: ~/.cache/ms-playwright
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Setup Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          cd www
          pnpm exec playwright install chromium --with-deps

      - name: Install http-server
        run: pnpm add -g http-server

      - name: Run tests
        working-directory: ./www
        run: pnpm test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: www/playwright-report/
          retention-days: 30

      - name: Build production bundle
        working-directory: ./www
        run: pnpm build:prod

      # ─── Ensure CNAME file is included ────────────────────────────────────────────
      - name: Copy CNAME file to dist
        run: cp -f www/CNAME www/dist/ || true

      # ─── GitHub Pages deployment prep ───────────────────────────────────────────
      - name: Configure GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: www/dist
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
